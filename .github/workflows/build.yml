name: Build Application

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: "构建版本号（例如 v3.0.0），否则使用 Git SHA 的前 7 位"
        required: false
        default: ""
        type: string

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.version_info.outputs.app_version }}
    steps:
      - name: Checkout code (to get SHA)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version_info
        run: |
          VERSION_INPUT="${{ github.event.inputs.version_override }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          if [ -n "$VERSION_INPUT" ]; then
            APP_VERSION="$VERSION_INPUT"
          else
            APP_VERSION="$SHORT_SHA"
          fi

          echo "Determined App Version: $APP_VERSION"
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT

  build_app:
    needs: determine_version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux x86_64 (GNU)
            os: ubuntu-latest
            cpython_triple: x86_64-unknown-linux-gnu
            artifact_suffix: Linux-x64-gnu
            use_emulator: false
          - name: Linux aarch64 (GNU)
            os: ubuntu-latest # 主机使用标准 x86 runner
            cpython_triple: aarch64-unknown-linux-gnu
            artifact_suffix: Linux-arm64-gnu
            use_emulator: true
          - name: macOS x86_64
            os: macos-13
            cpython_triple: x86_64-apple-darwin
            artifact_suffix: macOS-x64
            use_emulator: false
          - name: macOS aarch64
            os: macos-14
            cpython_triple: aarch64-apple-darwin
            artifact_suffix: macOS-arm64
            use_emulator: false
          - name: Windows x86_64
            os: windows-latest
            cpython_triple: x86_64-pc-windows-msvc
            artifact_suffix: Windows-x64
            use_emulator: false
          - name: Windows aarch64
            os: windows-latest-arm64
            cpython_triple: aarch64-pc-windows-msvc
            artifact_suffix: Windows-arm64
            use_emulator: false

    name: Build for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build on emulated arch
        if: matrix.use_emulator == true
        uses: uraimo/run-on-arch-action@v3
        with:
          arch: aarch64
          distro: ubuntu24.04

          githubToken: ${{ github.token }}

          env:
            CPYTHON_TRIPLE=${{ matrix.cpython_triple }}

          # 在容器构建时安装依赖。这些依赖会被缓存。
          # !! 注意：请根据你的 pack.sh 脚本所需，修改这里的依赖列表 !!
          install: |
            apt-get update -q -y
            apt-get install -q -y python3 python3-pip build-essential git

          # 在容器中执行的命令
          run: |
            echo "Building with CPYTHON_TRIPLE=${CPYTHON_TRIPLE}"
            chmod +x ./scripts/pack.sh
            ./scripts/pack.sh

      - name: Build on native runner
        if: matrix.use_emulator == false
        env:
          CPYTHON_TRIPLE: ${{ matrix.cpython_triple }}
        run: |
          # Windows
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Building with CPYTHON_TRIPLE=${CPYTHON_TRIPLE}"
            powershell -c "Install-Module -Name Msys2 -Force -Scope CurrentUser"
            C:\msys64\ucrt64\bin\bash.exe -c "chmod +x ./scripts/pack.sh && ./scripts/pack.sh"
          else
            if [[ "$CPYTHON_TRIPLE" == *"musl"* ]]; then
              sudo apt-get update
              sudo apt-get install -y musl-dev
            fi
            echo "Building with CPYTHON_TRIPLE=${CPYTHON_TRIPLE}"
            chmod +x ./scripts/pack.sh
            ./scripts/pack.sh
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GDUTCourseGrabber-${{ needs.determine_version.outputs.app_version }}-${{ matrix.artifact_suffix }}
          path: dist/*